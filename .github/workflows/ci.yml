name: CI - Build and Test

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ develop ]

jobs:
  test-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Lint Python code
      run: |
        # Install flake8 if not in requirements-dev.txt
        pip install flake8 black isort

        # Run linting
        flake8 lambda_functions/ lambda_layer/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 lambda_functions/ lambda_layer/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

        # Check code formatting
        black --check lambda_functions/ lambda_layer/ || echo "Code formatting issues found"
        isort --check-only lambda_functions/ lambda_layer/ || echo "Import sorting issues found"

    - name: Run Python tests
      run: |
        python -m pytest tests/ -v --tb=short || echo "No tests found or tests failed"

    - name: CDK Synth (validate CloudFormation)
      run: |
        # Set dummy values for CDK synth
        export CDK_DEFAULT_ACCOUNT=123456789012
        export CDK_DEFAULT_REGION=us-east-1
        npx cdk synth

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Lint frontend code
      run: |
        cd frontend
        npm run lint || echo "Linting issues found"

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false || echo "No tests found or tests failed"

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 7

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r lambda_functions/ lambda_layer/ -f json -o bandit-report.json || true

    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level=high || echo "Security vulnerabilities found"

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json
        retention-days: 30
